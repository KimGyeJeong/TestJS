// bar 함수 코드 실행

/*
런타임이 시작되어 bar 함수의 소스코드가 순차적을 실행되기 시작.
매개변수에 인수가 할당되고, 변수 할당문이 실행되어 지역 변수 z 에 값이 할당 됨.
그리고 console.log(a+b+x+y+z); 가 실행 됨

순서
1. console 식별자 검색
2. log 메서드 검색
3. 표현식 a+b+x+y+z의 평가
4. console.log 메서드 호출
    - 표현식 a+b+x+y+z가 평가되어 생성한 값을 console.log 메서드에 전달하여 호출

*/

// bar 함수 코드 실행 종료

/*
console.log 메서드가 호출되고 종료하면 더는 실행할 코드가 없으므로 bar 함수 코드의 실행이 종료됨
이때 실행 컨텍스트 스택에서 bar 함수 실행 컨텍스트가 팝되어 제거되고 foo 실행 컨텍스트가
실행중인 실행 컨텍스트가 됨

실행 컨텍스트 스택에서 bar 함수 실행 컨텍스트가 제거되었다고 해서 bar 함수 렉시컬 환경까지 즉시 소멸하는 것은 아님.
렉시컬 환경은 실행 컨텍스트에 의해 참조되기는 하지만 독립적인 객체임.
객체를 포함한 모든 값은 누군가에 의해 참조되지 않을 때 비로소 가비지 컬렉터에 의해 메모리 공간의 확보가 해제되어 소멸함.
--> bar 함수 실행 컨텍스트가 소멸되었다 하더라도 만약 bar 함수 렉시컬 환경을 누군가 참조하고 있다면
bar 함수 렉시컬 환경은 소멸하지 않음
*/

//foo 함수 코드 실행 종료

/*
bar 함수가 종료하면 더 이상 실행할 코드가 없으므로 foo 함수 코드의 실행이 종료 됨.
이때 실행 컨텍스트 스텍에서 foo 함수 실행 컨텍스트가 팝되어 제거되고 전역 실행 컨텍스트가 실행 중인 실행 컨텍스트가 됨.
*/

//전역 코드 실행 종료

/*
foo 함수가 종료되면 더는 실행할 전역 코드가 없으므로 전역 코드의 실행이 종료되고
전역 실행 컨텍스트도 실행 컨텍스트 스텍에서 팝되어 실행 컨텍스트 스텍에는 아무것도 남아있지 않게 됨.
*/

//실행 컨텍스트와 블록 레벨 스코프

/*
var 키워드로 선언한 변수는 오로지 함수의 코드 블록만 지역 스코프로 인정하는 함수 레벨 스코프를 따름.
하지만 let, const 키워드로 선언한 변수는 모든 코드 블록(함수, if, for, while, try/catch 등) 을
지역스코프로 인정하는 블록 레벨 스코프(block-level scope)를 따름
*/