//실행 컨텍스트 스택

// const x = 1;

// function foo() {
//     const y = 2;

//     function bar() {
//         const z = 3;
//         console.log(x + y + z);
//     }
//     bar();
// }
// foo();  //6

// 전역 코드와 함수코드로 이루어져있음.
// 자바스크립트 엔진은 먼저 전역 코드를 평가하여 전역 실행 컨텍스트를 생성함
// 그리고 함수가 호출되면 함수 코드를 평가하여 함수 실행 컨텍스트를 생성

//위의 예제 풀이..
/*
1. 전역 코드의 평가와 실행
2. foo 함수 코드의 평가와 실행
3. bar 함수 코드의 평가와 실행
4. foo 함수 코드로 복귀
5. 전역 코드로 복귀

실행 컨텍스트 스택은 코드의 실행 순서를 관리
실행 컨텍스트 스택의 최상위에 존재하는 실행 컨텍스트는 언제나 현재 실행 중인 코드의 실행 컨텍스트이다.

따라서 실행 컨텍스트 스택의 최상위에 존재하는 실행 컨텍스트를
실행 중인 실행 컨텍스트 running execution context라 부른다.

*/

//렉시컬 환경 Lexcial Environment

//렉시컨 환경은 식별자와 식별자에 바인딩된 값, 그리고 상위 스코프에 대한 참조를
//기록하는 자료구조로 실행 컨텍스트를 구성하는 컴포넌트이다.
//실행 컨텍스트 스택이 코드의 실행 순서를 관리한다면 렉시컬 환경은 스코프와 식별자를 관리한다.

// const x = 1;

// function foo() {

//     const y = 2;
//     console.log(x + y);
// }
// foo();  //3

//실행 컨텍스트는 LexicalEnvironment 컴포넌트와 VariableEnvironment 컴포넌트로 구성됨.


//어떻게 실행 컨텍스트가 생성되고 코드 실행 결과가 관리 되는지,
// 그리고 어떻게 실행 컨텍스트를 통해 식별자를 검색하는지 확인하기..

var x = 1;
const y = 2;

function foo(a) {
    var x = 3;
    const y = 4;

    function bar(b) {
        const z = 5;
        console.log(a + b + x + y + z); //20 + 10 + 3 + 4 + 5
    }
    bar(10);
}
foo(20);    //42

/*
1. 전역 객체 생성
    1-1. 전역 객체도 프로토타입 체인의 일원

2. 전역 코드 평가
    2-1. 전역 실행 컨텍스트 생성
        - 비어있는 전역 실행 컨텍스트를 생성하여 실행 컨텍스트 스택에 푸시.
        - 이때 전역 실행 컨텍스트는 실행 컨텍스트 스택의 최상위. 즉 실행 중인 실행 컨텍스트(runnint execution context) 가 됨.
    2-2. 전역 렉시컬 환경 생성
        - 전역 렉시컬 환경(global lexical environment)을 생성하고 전역 실행 컨텍스트에 바인딩 함
        - 렉시컬 환경은 2개의 컴포넌트. 환경 레코드와 외부 렉시컬 환경에 대한 참조로 구성.
        2-2-1. 전역 환경 레코드 생성
            - 전역 환경 레코드는 객체 환경 레코드와 선언적 환경 레코드로 구성 되어 있음
            2-2-1-1. 객체 환경 레코드 생성
                - 전역 코드 평가 과정에서 var 키워드로 선언한 전역 변수와 함수 선언문으로 정의된
                전역 함수는 전역 환경 레코드의 객체 환경 레코드에 연결된 BindingObject를 통해 
                전역 객체의 프로퍼티와 메서드가 됨
            2-2-1-2. 선언적 환경 레코드 생성
                - var 키워드로 선언한 전역 변수와 함수 선언문으로 정의한 전역 함수 이외의 선언,
                즉 let, const 키워드로 선언한 전역 변수(let, const 키워드로 선언한 변수에 할당한 함수 표현식 포함)는
                선언적 환경 레코드에 등록되고 관리된다.
                 런타임에 실행 흐름이 변수 선언문에 도달하기 전까지 일시적 사각지대(Temporal Dead Zone)에 빠짐.
        2-2-2. this 바인딩
            - 전역 환경 레코드의 [[GlobalThisValue]] 내부 슬롯에 this가 바인딩 됨
            this 바인딩은 전역 환경 레코드와 함수 환경 레코드에만 존재
        2-2-3. 외부 렉시컬 환경에 대한 참조 결정
            - 외부 렉시컬 환경에 대한 참조(Ourer Lexical Environment Reference)는 현재 평가 중인 소스코드를 포함하는
            외부 소스코드의 렉시컬 환경, 즉 상위 스코프를 가리킴
3. 전역 코드 실행
    - 동일한 이름의 식별자가 다른 스코프에 여러 개 존재할 수도 있음.
    어느 스코프의 식별자를 참조하면 되는지 결정할 필요가 있는데 이를 식별자 결정(Identifier Resolution)이라 함.
    - 식별자 결정을 위해 식별자를 검색할때는 실행 중인 실행 컨텍스트에서 식별자를 검색하기 시작한다.
    선언된 식별자는 실행 컨텍스트의 렉시컬 환경의 환경 레코드에 등록되어 있음.

*/